// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler: v-if codegen basic v-if 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createVNode: _createVNode, openBlock: _openBlock, createBlock: _createBlock, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? (_openBlock(), _createBlock(\\"div\\", { key: 0 }))
      : _createCommentVNode(\\"v-if\\", true)
  }
}"
`;

exports[`compiler: v-if codegen template v-if 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createVNode: _createVNode, Fragment: _Fragment, openBlock: _openBlock, createBlock: _createBlock, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? (_openBlock(), _createBlock(_Fragment, { key: 0 }, [
          _createVNode(\\"div\\"),
          \\"hello\\",
          _createVNode(\\"p\\")
        ], 64 /* STABLE_FRAGMENT */))
      : _createCommentVNode(\\"v-if\\", true)
  }
}"
`;

exports[`compiler: v-if codegen template v-if w/ single <slot/> child 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { renderSlot: _renderSlot, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? _renderSlot($slots, \\"default\\", { key: 0 })
      : _createCommentVNode(\\"v-if\\", true)
  }
}"
`;

exports[`compiler: v-if codegen v-if + v-else 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createVNode: _createVNode, openBlock: _openBlock, createBlock: _createBlock, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? (_openBlock(), _createBlock(\\"div\\", { key: 0 }))
      : (_openBlock(), _createBlock(\\"p\\", { key: 1 }))
  }
}"
`;

exports[`compiler: v-if codegen v-if + v-else-if + v-else 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createVNode: _createVNode, openBlock: _openBlock, createBlock: _createBlock, createCommentVNode: _createCommentVNode, Fragment: _Fragment } = _Vue

    return ok
      ? (_openBlock(), _createBlock(\\"div\\", { key: 0 }))
      : orNot
        ? (_openBlock(), _createBlock(\\"p\\", { key: 1 }))
        : (_openBlock(), _createBlock(_Fragment, { key: 2 }, [\\"fine\\"], 64 /* STABLE_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-if codegen v-if + v-else-if 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createVNode: _createVNode, openBlock: _openBlock, createBlock: _createBlock, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? (_openBlock(), _createBlock(\\"div\\", { key: 0 }))
      : orNot
        ? (_openBlock(), _createBlock(\\"p\\", { key: 1 }))
        : _createCommentVNode(\\"v-if\\", true)
  }
}"
`;

exports[`compiler: v-if codegen v-if on <slot/> 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { renderSlot: _renderSlot, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? _renderSlot($slots, \\"default\\", { key: 0 })
      : _createCommentVNode(\\"v-if\\", true)
  }
}"
`;

exports[`compiler: v-if codegen v-if with key 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createVNode: _createVNode, openBlock: _openBlock, createBlock: _createBlock, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? (_openBlock(), _createBlock(\\"div\\", { key: \\"some-key\\" }))
      : _createCommentVNode(\\"v-if\\", true)
  }
}"
`;
