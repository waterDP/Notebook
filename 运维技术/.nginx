usr nginx;

# 工作进程数 cpu 核心数
worker_processes 1;
# 指定错误日志的路径 日志的格式
error_log /var/log/nginx/error.log warn;
# 这是一个文件，里面放的是当前nginx的进程号
pid /let/run/nginx.pid;


# 事件驱动模块
events {
  worker_connections 1024; # 工作进程的最大接连数
}

# http内核模块
http {
  include /etc/nginx/mime.types; # 包含内容和文件后缀的对应关系
  default_type application/octet-stream; # 默认的文件类型

  # 定义一个日志格式main
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"'
  '"$arg_name" "$http_host" "$sent_http_date"';

  access_log /var/log/nginx/access.log main;

  sendfile on; # 零拷贝传输械
  tcp_nopush on; # tcp 有一定的缓存
  keepalive_timeout 600s; # 活动链接的超时时间
  gzip on; # 是否启用压缩
  gzip_http_version 1.1;
  gzip_comp_level 4;
  gzip_types text/plain applicaion/javascript application/x-javascript;
  client_max_body_size 500m;
  client_body_timeout 600s;

  # 配置上游服务，用以实现负载均衡
  # 1 默认策略 轮询
  upstream myServer {
    server 192.168.17.129:8080;
    server 192.168.17.129:8081;
  }

  # 2 权重 weight
  upstream myServer1 {
    server 192.168.17.129:8080 weight=10;
    server 192.168.17.129:8081 weight=1;
  }

  # 3 ip_hash 可以解决session共享的问题
  upstream myServer2 {
    ip_hash;
    server 192.168.17.129:8080;
    server 192.168.17.129:8081;
  }

  # 4 least_conn 把请求转发给连接数较少的后台服务器
  upstream myServer4 {
    least_conn;
    server 192.168.17.129:8080;
    server 192.168.17.129:8081;
  }

  # 5 fair 第三方 按后端服务器的响应时间来分配请求，响应时间短的优先分配
  upstream myServer5 {
    fair;
    server 192.168.17.129:8080;
    server 192.168.17.129:8081;
  }

  # 6 url_hash 按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器
  upstream myServer6 {
    hash $request_uri;
    server 192.168.17.129:8080;
    server 192.168.17.129:8081;
  }

  limit_req_zone $binary_remote_addr zone=req_zone:10m rate=1r/s;
  limit_conn_zone $binary_remote_addr zone=conn_zone:10m;

  server {
    listen 80; # 监听的端口号
    server_name 192.168.17.129;
    charset charset | off; # 指定字符集

    # 限制请求体的大小，若超过所设定的大小，返回413错误
    client_max_body_size 1024m;

    # 读取请求头超时时间，若超过所设定的大小，返回408错误
    client_header_timeout 1s;

    # 读取请求实体的超时时间，若超过所设定的大小，返回413错误
    client_body_timeout 1s;

    # http请求无法立即被容器处理，被放在nginx的待处理池中等待被处理。此参数为等待的最长时间，默认为60秒
    proxy_connect_timeout 60s;

    # http请求被窗口处理和，nginx会等待处理结果，也就是容器返回response。此参数即为服务器响应时间，默认为60秒
    proxy_read_timeout 1m;

    # http请求被服务器处理完后，把数据返回给nginx的用时，默认为60秒
    proxy_send_timeout 1m;
    root /usr/share/nginx/html;

    # nginx配置 https
    ssl on;
    #ssl证书的pem文件路径
    ssl_certificate /root/card/huiblog.top.pem;
    #ssl证书的key文件路径
    ssl_certificate_key /root/card/huiblog.top.key;

    # location 优先级
    # =  开头表示精确匹配，只有完全相同才匹配
    # ^~ 开头表示uri以某个常规字符串开头，理解为匹配url路径即可
    # ~  开头表示区分大小写的正则匹配
    # ~* 开头表示不区分大小写的正则匹配
    # !~ 和 !~*分别为区分大小写不匹配及不区分大小写不匹配的正则
    # /  通用匹配，任何请求会会匹配到

    # router history模式设置
    location / {
      try_files $uri $uri/ /index.html;
      limit_req zone=req_zone burst=3 nodelay; # 请求限制
      limit_conn conn_zone 1; # 连接限制
    }

    # 负载均衡
    location ^~ /fzjh {
      proxy_pass http://myserver
    }

    # 此路径可以返回服务器状态
    location = /status {
      stub_status on;
    }

    location ^~ /csm {
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      add_header Access-Control-Allow-Origin * always;
      add_header Access-Control-Allow-Headers *;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELTE, OPTIONS"
      if ($request_method = 'OPTIONS') {
        return 200;
      }
      proxy_pass http://10.100.10.4:5501;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
      root /usr/share/nginx/html;
    }

  }
}